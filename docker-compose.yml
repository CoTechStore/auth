x-shared-web-parameters: &x-shared-web-parameters
  build:
    context: ./
    dockerfile: Dockerfile
    target: web-runtime
  env_file: .env
  networks:
    - auth_network


services:

  auth.service:
    <<: *x-shared-web-parameters
    container_name: auth.service
    command: ["sh", "-c", "auth-web start-uvicorn"]
    restart: unless-stopped
    depends_on:
      auth.migrator:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:${SERVER_PORT}/healthcheck || exit 1" ]
      start_period: 15s
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "7000:${SERVER_PORT}"

  auth.migrator:
    <<: *x-shared-web-parameters
    container_name: auth.migrator
    command: ["sh", "-c", "auth-web migrate"]
    restart: no
    depends_on:
      auth.db:
        condition: service_healthy

  auth.worker:
    build:
      context: ./
      dockerfile: Dockerfile
      target: worker-runtime
    container_name: auth.worker
    command: [ "sh", "-c", "auth-worker start-worker" ]
    restart: unless-stopped
    env_file: .env
    networks:
      - auth_network
    depends_on:
      auth.service:
        condition: service_healthy
      auth.rabbitmq:
        condition: service_healthy

  auth.db:
    image: postgres:17.4-alpine
    env_file: .env
    container_name: auth.db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - pg_data:/data/postgres
      - ./scripts/db-initializer.sh:/docker-entrypoint-initdb.d/db-initializer.sh
    networks:
      - auth_network
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  auth.rabbitmq:
    image: rabbitmq:4.1.0-alpine
    env_file: .env
    container_name: auth.rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
      RABBITMQ_NODE_PORT: ${RABBIT_PORT}
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - auth_network
    ports:
      - "${RABBIT_PORT}:${RABBIT_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  auth_network:
    driver: bridge

volumes:
  pg_data:
  rabbitmq_data:
